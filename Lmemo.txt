ユーザーページを探検において
ローカルページのURLはどこにあるのか
どういうメカニズムで生成されるのか


MVC補足
コノサイトが見たい
リクエストに対して
見せる
応答レスポンス

そのうえで
HTMLのコードDLしてきて（ここまでがサーバー）

クライアント　自分
クライアントサイドのwebの問題は
サーバーには直接関係がない

MVCモデルは
モデル(データベース)
最終的にはHTMLに返す(view)

railsは特定のコマンドをうつことで
ファイルを生成してくれる

rails generate controller hoge
だとコントローラーに特定の
機能を生成してくれる

データを取得する処理に問題
例えば１をとろうとして１０手に入れた場合
データに問題があるのか
データの取得する手段に問題があるのか
表示がバグで文字化けしてるのか
問題の切り分けのため
MVCが存在する

コントローラーの中に
スポーツクラスがあって
suports get ("ninki")
モデルの中で票数を集める関数
を製作して
Supports.get('ninki')
get(引数) {
データベース・アクセス where (引数)
return データ
}
と
Support.get('ninki', 10件)
の場合
下段の場合は件数が限定されてしまいがち

モデルの中での処理は
メールアドレスの成否判定は
モデルで済ませる。

モデルはデータベースとの
やりとりを書く所

コントローラーは
ユーザー間とのやり取りを書く所

rails generate controller supports
# SupportsControllerが作られる
# スポーツに関するWebページで、ページ閲覧者とのやり取りを書く

rails generate model kyugi
# KyugiModelが作られる
# 球技に関するデータを保存したデータベースとのやり取りを書く

ユーザーが受け取ったデータを処理すること。
それを元にデータ処理すること

データの渡し方
GET=URLで渡す
POST=URLにみえない形で渡す（個人情報等、見てはいけないものはこちら)

google.com?q=kensaku
? 以降は、全てGETで渡されるデータ
（httpでの通信でのルール
まず google.com
railsでいうと、routes.rbに
root to: "home#index"　と書いて
HomeControllerで def index を表示する

---
? q = kensaku
これは、パラメータ名 'q' に kensaku というデータを格納してコントローラに渡す
※ queryのqです

実際のrailsコードっぽく書くと、

def index
    query = params[:q] # kensaku という文字列が格納されている

    # データベースにアクセスして kensaku に一致するページを返す処理

    # あとはその結果を表示する
exit

getやポストに入力するまでがコントローラー
受け取った情報を処理するのがモデル

全部終わった後に覚えて欲しいことがある
可能な限り、ブログや他のユーザーの記事を見ないで欲しい
理由：それぞれの環境はプログラムによって間違いが違う
    　ただ、なんとなく問題をクリアしてしまう
    　解決できた気がする、してしまう

ネットショップ(EC)やブログはPHPが多く使われる傾向

ウェブサービス系は ruby

pythonは難しい計算、特に研究職で使われる
海外なら上記の物もpythonが使われる

特徴
ruby　 楽、早い、自分なりにコ－ディング出来る
PHP　　あいまいに書ける、(falseの判定が緩い)
　　　 web実績が多い
python ルール厳守(誰が見ても分かるコードが出来る)
　　　 インデントレベルでコードを管理される
　　　 複数人開発に向いている
java   どんな環境でも動く
　　　 ユーザーの開発環境に依存しない
C　　　難しい代わりに、無駄なく書くと
　　　 余計な動作が無く、早い
javascript 書かれたコードに対してユーザーが反応している
　         （クライアントサイドで動かしている）
ｃ++　 